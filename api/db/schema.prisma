datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  //url = env("TEST_DATABASE_URL")
}
// in .env file, define DATABASE_URL as:
// DATABASE_URL="mysql://root:ESCAPED_ROOT_PASSWORD@localhost:3306/agile_weather"
// see .env.defaults

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
  previewFeatures = ["interactiveTransactions"]
}

model User {
  id                    Int   @id @default(autoincrement())
  name                  String?
  email                 String @unique
  hashedPassword        String
  salt                  String
  resetToken            String?
  resetTokenExpiresAt   DateTime?
}
model GeoLocation {
  id  Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  city String
  zip String?
  state String?
  stateAbbrev String?

  fips String?
  county String?

  stations Station[]
}
model Station {
  id   String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  code String @unique

  geoLocations GeoLocation[]

  latitude Float?
  longitude Float?
  elevation Float?

  gsn String?
  hcn String?
  wmoid String?

  stationName String?

  climateEntries ClimateEntry[]
}

model ClimateDataPoint {
  id    String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  label String
  value String
  flag  String?

  climateEntry ClimateEntry @relation(fields: [climateEntryId], references: [id])
  climateEntryId Int
}
model ClimateEntry {
  id  Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  station   Station @relation(fields: [stationId], references: [id])
  stationId   String

  topic     String
  period    String
  dataSet   String

  dataPoints ClimateDataPoint[]
}
model RW_DataMigration {
  version    String   @id
  name       String
  startedAt  DateTime
  finishedAt DateTime
}
model ZipSearch {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  zip String
  date DateTime @default(now())
}
